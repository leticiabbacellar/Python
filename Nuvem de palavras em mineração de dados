#Pré processamento de palavras usando o lowercasing, tokenização, stopwords, stemming e lemmatization para criar nuvem de palavras

!pip install nltk wordcloud
!pip install spacy
!pip install pandas
!python -m spacy download pt_core_news_sm

import nltk
nltk.download('stopwords')
nltk.download('rslp')
from collections import Counter
from nltk.corpus import stopwords
from nltk.tokenize import ToktokTokenizer
from collections import Counter
import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from nltk.stem import RSLPStemmer
import spacy
nlp = spacy.load("pt_core_news_sm")

df= pd.read_csv ("/content/tweet_sentiment.csv")
df.info()

stopwords.words("english")

tokenizer = ToktokTokenizer()
stopwords_ = set(stopwords.words('english'))

#Pré processamento de palavras= lowercasing, tokenização e stopwords)
tokens_totais = []


for tweet in df['tweet']:

    tokens = tokenizer.tokenize(tweet)

    tokens_filtrados = [token.lower() for token in tokens
                         if token.lower() not in stopwords_ and token.isalpha()]
    tokens_totais.extend(tokens_filtrados)


frequencia = Counter(tokens_totais)


top_20 = frequencia.most_common(20)
print(top_20)

top_20 = dict (frequencia.most_common(20))

wordcloud = WordCloud (width =800, height= 700, background_color= "black").generate_from_frequencies(top_20)

plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

#stemming e lemmatização
from nltk.stem import RSLPStemmer

stemmer= RSLPStemmer()

stemmed_counts = {}

for word, count in top_20.items():
    stem = stemmer.stem(word)
    stemmed_counts[stem] = stemmed_counts.get(stem, 0) + count


print(stemmed_counts)

lemmatized_counts= {}

for word, count in top_20.items():
  doc = nlp(word)
  lemma = doc[0].lemma_
  lemmatized_counts[lemma] = lemmatized_counts.get(lemma, 0) + count

print(lemmatized_counts)

wordcloud= WordCloud (width= 800, height= 900, background_color= "black").generate_from_frequencies(lemmatized_counts)

plt.figure(figsize=(15, 12))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.show()
